/*
opcode: 
000 -> mv: 

001 -> mvi:

010 -> add:

011 -> sub:

100 -> ld:

101 -> st:

110 -> mvnz:

111 -> 
*/

/*
regs_in:
0 -> R0_in
1 -> R1_in
2 -> R2_in
3 -> R3_in
4 -> R4_in
5 -> R5_in
6 -> R6_in
7 -> R7_in
8 -> A_in
9 -> G_in
10 -> ADDR_in
11 -> DOUT_in
12 -> IR_in
*/


module controlador(input [8:0] in, input run, input resetn, input [1:0] cont, input [15:0] G_out, output clear, output reg done, output reg [3:0] mux_selector, output reg [12:0] regs_in, output reg ula_op, output reg incr_pc, output reg W_D);
	wire [2:0] opcode, Rx, Ry;
	assign opcode = in[8:6];
	assign Rx = in[5:3];
	assign Ry = in[2:0];

	assign clear = resetn || done;

	always @(in, cont, run) begin
		if(run == 1'b1) begin
			case(cont)
				2'b00: begin 
					incr_pc <= 1'b1;
					done <= 1'b0;
					mux_selector <= 4'b1111;
					regs_in <= 13'b1000000000000; // IR_in habilitado
					ula_op <= 1'bX;
					W_D <= 1'b0;
				end
				2'b01: begin
					incr_pc <= 1'b0;
					case(opcode)
						3'b000: begin // mv
							done <= 1'b1;
							mux_selector <= { 1'b0, Ry}; // Ry_out habilitado
							regs_in <= 13'b0000000000000;
							regs_in[Rx] <= 1'b1; // RX_in habilitado
							ula_op <= 1'bX;
							W_D <= 1'b0;
						end
						3'b001: begin // mvi
							done <= 1'b1;
							mux_selector <= 4'b1000; // DIN_out habilitado
							regs_in <= 13'b0000000000000;
							regs_in[Rx] <= 1'b1; // Rx_out habilitado
							ula_op <= 1'bX;
							W_D <= 1'b0;
						end
						3'b010: begin // add
							done <= 1'b0;
							mux_selector <= { 1'b0, Rx}; // Rx_out habilitado
							regs_in <= 13'b0000000001000; // A_in habilitado
							ula_op <= 1'bX;
							W_D <= 1'b0;
						end
						3'b011: begin // sub
							done <= 1'b0;
							mux_selector <= { 1'b0, Rx}; // Rx_out habilitado
							regs_in <= 13'b0000000001000; // A_in habilitado
							ula_op <= 1'bX;
							W_D <= 1'b0;
						end
						3'b100: begin // ld
							done <= 1'b0;
							mux_selector <= { 1'b0, Ry} // Ry_out habilitado
							regs_in <= 13'b0010000000000; // ADDR_in habilitado
							ula_op <= 1'bX;
							W_D <= 1'b0;
						end
						3'b101: begin // sd
							done <= 1'b0;
							mux_selector <= { 1'b0, Ry} // Ry_out habilitado
							regs_in <= 13'b0010000000000; // ADDR_in habilitado
							ula_op <= 1'bX;
							W_D <= 1'b0;
						end
						3'b110: begin // mvnz
							done <= 1'b1;
							mux_selector <= { 1'b0, Ry}; // Ry_out habilitado
							regs_in <= 13'b0000000000000;
							if(G_out == 16'b0000000000000000)
								regs_in[Rx] <= 1'b1; // RX_in habilitado
							ula_op <= 1'bX;
							W_D <= 1'b0;
						end
					endcase
				end
				2'b10: begin
					incr_pc <= 1'b0;
					case(opcode)
						3'b010: begin // add
							done <= 1'b0;
							mux_selector <= { 1'b0, Ry}; // Ry_out habilitado
							regs_in <= 13'b0000000001001; // G_in habilitado
							ula_op <= 1'b1;
							W_D <= 1'b0;
						end
						3'b011: begin // sub
							done <= 1'b0;
							mux_selector <= { 1'b0, Ry}; // Ry_out habilitado
							regs_in <= 13'b0000000001001; // G_in habilitado
							ula_op <= 1'b0;
							W_D <= 1'b0;
						end
						3'b100: begin // ld
							done <= 1'b1;
							mux_selector <= 4'b1000; // DIN_out habilitado
							regs_in <= 13'b0000000000000;
							regs_in[Rx] <= 1'b1; // Rx_out habilitado
							ula_op <= 1'bX;
							W_D <= 0;
						end
						3'b101: begin // sd
							done <= 1'b1;
							mux_selector <= { 1'b0, Rx}; // Rx_out habilitado
							regs_in <= 13'b0100000000000; // DOUT_in habilitado
							ula_op <= 1'bX;
							W_D <= 1'b1;
						end
					endcase
				end
				2'b11: begin 
					incr_pc <= 1'b0;
					case(opcode)
						3'b010: begin // add
							done <= 1;
							mux_selector <= 4'b1001; // G_out habilitado
							regs_in <= 13'b0000000000000;
							regs_in[Rx] <= 1'b1; // RX_in habilitado
							ula_op <= 1'bX;
							W_D <= 1'b0;
						end
						3'b011: begin // sub
							done <= 1;
							mux_selector <= 4'b1001; // G_out habilitado
							regs_in <= 13'b0000000000000;
							regs_in[Rx] <= 1'b1; // RX_in habilitado
							ula_op <= 1'bX;
							W_D <= 1'b0;
						end
					endcase
				end
			endcase
		end
	end
endmodule